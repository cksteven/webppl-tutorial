var transition = function(state, action) {
  return state + action;
};


/**
* Exercise 1: a loop line; the agent goes from 0 to 3,
* and then stops at 3.
*/
// var transition = function (state, action) {
//   var res1 = state + action;
//   var res2 = res1 > 3 ? 0 : res1;
//   var res3 = res2 < 0 ? 3 : res2;
//   return res3;
// };

var utility = function(state) {
  if (state === 3) {
    return 1;
  } else {
    return 0;
  }
};
/**
 * Exercise 3: move as far as possible to the right.
 */
// var utility = function(state) {
//   return state;
// };

var makeAgent = function() {
  var act = dp.cache(function(state, timeLeft) {
    return Infer({ model() {
      var action = uniformDraw([-1, 0, 1]);
      /**
       * Exercise 2: allow two steps move. The agent goes 0, 1, 3, 3.
       */
      // var action = uniformDraw([-2, -1, 0, 1, 2]);
      var eu = expectedUtility(state, action, timeLeft);
      factor(100 * eu);
      return action;
    }});
  });

  var expectedUtility = dp.cache(function(state, action, timeLeft) {
    var u = utility(state, action);
    var newTimeLeft = timeLeft - 1;
    if (newTimeLeft === 0) {
      return u;
    } else {
      return u + expectation(Infer({ model() {
        var nextState = transition(state, action);
        var nextAction = sample(act(nextState, newTimeLeft));
        return expectedUtility(nextState, nextAction, newTimeLeft);
      }}));
    }
  });

  return { act };
}


var act = makeAgent().act;

var simulate = function(state, timeLeft){
  if (timeLeft === 0){
    return [];
  } else {
    var action = sample(act(state, timeLeft));
    var nextState = transition(state, action);
    return [state].concat(simulate(nextState, timeLeft - 1))
  }
};

var startState = 0;
var totalTime = 4;
print("Agent's trajectory: " + simulate(startState, totalTime));

/**
 * Exercise: we CAN also memoize simulate.
 * Each simulate(state, timeLeft) can be calculated multiple times,
 * just like agent(state, timeLeft).
 *
 * In other words, agent can have multiple ways/paths to move to a state
 * using the same amount of time. The same sate can be reached using
 * multiple trajectories in the same amount of time.
 */